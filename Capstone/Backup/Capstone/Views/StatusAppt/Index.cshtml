@model Capstone.Models.appointments_table

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using Capstone.Models
@{capstoneEntities storeDB = new capstoneEntities();}

    <script src="/Scripts/MicrosoftAjax.js" type="text/javascript"></script>
    <script src="/Scripts/MicrosoftMvcAjax.js" type="text/javascript"></script>
    <script src="/Scripts/jquery-1.4.1.min.js" type="text/javascript"></script>

    <script type="text/javascript">
        function handleUpdate(context) {
            // Load and deserialize the returned JSON data
            var json = context.get_data();
            var data = Sys.Serialization.JavaScriptSerializer.deserialize(json);

            // Update the page elements
            $('#row-' + data.DeleteId).fadeOut('slow');
            $('#cart-status').text('Cart (' + data.CartCount + ')');
            $('#update-message').text(data.Message);
            $('#cart-total').text(data.CartTotal);
        }
    </script>

    <h3>
        Appointment Request
    </h3>
    <p class="button">
    </p>

    <div id="update-message"></div>

    <table>

        <tr>
            <th>Appointment Date</th>
            <th>Appointment Time</th>
            <th>Appointment Reason</th>
            <th>Approved by Owner</th>
            <th></th>
        </tr>

        @{
            foreach (var apptItem in storeDB.appointments_table)
            {
                if (apptItem.appointment_num == Model.appointment_num)
                {
                   
                    @Html.Raw("<tr><td>");
                    @Html.Encode(apptItem.appointment_date.Value.ToShortDateString());
                    @Html.Raw("</td><td>");
                    @Html.Encode(apptItem.appointment_time);
                    @Html.Raw("</td><td>");
                    @Html.Encode(apptItem.service_reason);
                    @Html.Raw("</td><td>");
                    @Html.Encode(apptItem.approved);
                    @Html.Raw("</td></tr>");
                }
            }
        }
    </table>


    <h3>
        User Details - You may need to email the user for more information or if the appointment will not work out.
    </h3>
    <table>

        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>User email</th>
            <th>Username</th>
            <th></th>
        </tr>

        @{
            foreach (var userItem in storeDB.users_table)
            {
                if (userItem.user_num == Model.user_num_request)
                {
                   
                    @Html.Raw("<tr><td>");
                    @Html.Encode(userItem.first_name);
                    @Html.Raw("</td><td>");
                    @Html.Encode(userItem.last_name);
                    @Html.Raw("</td><td>");
                    @Html.Encode(userItem.user_email);
                    @Html.Raw("</td><td>");
                    @Html.Encode(userItem.username);
                    @Html.Raw("</td></tr>");
                }
            }
        }
    </table>

@{
    // Check if status is still pending, only allow cancellation at this time
    if (Model.approved.Contains("Pending"))
    {
         using (Html.BeginForm())
         {
             // Send off the invoice number to the controller when the user submits the form
            @Html.HiddenFor(m => m.appointment_num);
    
            @Html.Raw("<br / ><div style='text-align:center'>");
            @Html.Raw("<input type='submit' value='Approve Appointment' />");
            @Html.Raw("</div>");
         }
    }
}